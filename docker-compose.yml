name: check24-tippspiel-challenge

services:
  keycloak:
    restart: always
    build:
      context: ./docker/keycloak
      dockerfile: Dockerfile
      target: development
    ports:
      - "8080:8080"
    command:
      - start-dev
      - --db=postgres
      - --import-realm
      - -Dkeycloak.migration.strategy=OVERWRITE_EXISTING
      - --transaction-xa-enabled=false
    depends_on:
      db:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://db:5432/keycloak
      KC_DB_USERNAME: root
      KC_DB_PASSWORD: password
      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/server.crt.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/server.key.pem
      KC_HOSTNAME: localhost
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
    volumes:
      - ./docker/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
      - ./docker/keycloak/server.crt.pem:/opt/keycloak/conf/server.crt.pem:ro
      - ./docker/keycloak/server.key.pem:/opt/keycloak/conf/server.key.pem:ro
    networks:
      - client
      - server

  client:
    restart: always
    build:
      context: ./client
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - node-modules-client:/app/node_modules/
    healthcheck:
      test: "curl -f http://localhost:3000 || exit 1"
      interval: 5s
    entrypoint: npm run dev
    networks:
      - client
      - server

  storybook:
    restart: always
    build:
      context: ./client
      dockerfile: Dockerfile
      target: development
    ports:
      - "6006:6006"
    volumes:
      - ./client:/app
      - node-modules-storybook:/app/node_modules/
    healthcheck:
      test: "curl -f http://localhost:6006 || exit 1"
      interval: 5s
    working_dir: /app
    command: npm run storybook
    networks:
      - client

  server:
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile
      target: development
    entrypoint: CompileDaemon -build="go build -o /build/server" -command="/build/server"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./server:/app
    networks:
      - server

  db:
    restart: always
    build:
      context: ./docker/postgresql
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U root -d master'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - server

networks:
  client:
  server:

volumes:
  node-modules-client:
  node-modules-storybook:
  db-data: