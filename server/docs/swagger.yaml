definitions:
  http.Team:
    properties:
      name:
        type: string
      result:
        type: integer
    type: object
  http.betResponse:
    properties:
      bet:
        properties:
          awayTeam:
            type: integer
          homeTeam:
            type: integer
          id:
            type: string
          match:
            $ref: '#/definitions/http.matchResponse'
        type: object
    type: object
  http.betUpdateRequest:
    properties:
      bet:
        properties:
          awayTeam:
            type: integer
          homeTeam:
            type: integer
        required:
        - awayTeam
        - homeTeam
        type: object
    type: object
  http.betsResponse:
    properties:
      bets:
        items:
          $ref: '#/definitions/http.betResponse'
        type: array
    type: object
  http.communitiesResponse:
    properties:
      communities:
        items:
          $ref: '#/definitions/http.communityResponse'
        type: array
    type: object
  http.communityCreateRequest:
    properties:
      community:
        properties:
          name:
            type: string
        type: object
    type: object
  http.communityResponse:
    properties:
      community:
        properties:
          id:
            type: string
          name:
            type: string
          owner:
            type: string
        type: object
    type: object
  http.jobResponse:
    properties:
      job:
        properties:
          name:
            type: string
          updatedAt:
            type: string
        type: object
    type: object
  http.matchResponse:
    properties:
      match:
        properties:
          awayTeam:
            $ref: '#/definitions/http.Team'
          gameTime:
            type: string
          homeTeam:
            $ref: '#/definitions/http.Team'
          id:
            type: string
          resultUpdatedAt:
            type: string
        type: object
    type: object
  http.matchUpdateRequest:
    properties:
      match:
        properties:
          awayTeam:
            properties:
              name:
                type: string
              result:
                type: integer
            type: object
          homeTeam:
            properties:
              name:
                type: string
              result:
                type: integer
            type: object
        type: object
    type: object
  http.matchesResponse:
    properties:
      matches:
        items:
          $ref: '#/definitions/http.matchResponse'
        type: array
    type: object
  http.rootResponse:
    properties:
      message:
        type: string
    type: object
  http.userResponse:
    properties:
      user:
        properties:
          email:
            type: string
          firstName:
            type: string
          id:
            type: string
          lastName:
            type: string
          username:
            type: string
        type: object
    type: object
info:
  contact: {}
  title: Check24 Tippspiel Challenge
  version: "1.0"
paths:
  /:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.rootResponse'
      summary: Example
      tags:
      - Root
  /v1/bets:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.betsResponse'
      security:
      - OAuth2Implicit: []
      summary: Retrieve all bets from the current user
      tags:
      - Bets
  /v1/bets/{bet_id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Bet ID
        in: path
        name: bet_id
        required: true
        type: string
      - description: Update Bet
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/http.betUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.betResponse'
      security:
      - OAuth2Implicit: []
      summary: Update bet with the given id
      tags:
      - Bets
  /v1/communities:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.communitiesResponse'
      security:
      - OAuth2Implicit: []
      summary: Retrieve all communities the current user is part of
      tags:
      - Communities
    post:
      consumes:
      - application/json
      parameters:
      - description: Create Community
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/http.communityCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.communityResponse'
      security:
      - OAuth2Implicit: []
      summary: Create a new community
      tags:
      - Communities
  /v1/communities/{community_id}:
    delete:
      parameters:
      - description: Community ID
        in: path
        name: community_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.communityResponse'
      security:
      - OAuth2Implicit: []
      summary: Delete the specified community
      tags:
      - Communities
    get:
      parameters:
      - description: Community ID
        in: path
        name: community_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.communityResponse'
      security:
      - OAuth2Implicit: []
      summary: Retrieve a community with the given id
      tags:
      - Communities
  /v1/communities/{community_id}/join:
    post:
      parameters:
      - description: Community ID
        in: path
        name: community_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.communityResponse'
      security:
      - OAuth2Implicit: []
      summary: Join the specified community
      tags:
      - Communities
  /v1/communities/{community_id}/leave:
    put:
      parameters:
      - description: Community ID
        in: path
        name: community_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.communityResponse'
      security:
      - OAuth2Implicit: []
      summary: Leave the specified community
      tags:
      - Communities
  /v1/communities/{community_id}/members:
    get:
      parameters:
      - description: Community ID
        in: path
        name: community_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.communitiesResponse'
      security:
      - OAuth2Implicit: []
      summary: Retrieve all users that are part of a community
      tags:
      - Communities
  /v1/jobs/{job_name}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Job Name
        in: path
        name: job_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.jobResponse'
      security:
      - OAuth2Implicit: []
      summary: Retrieved specified job
      tags:
      - Jobs
  /v1/matches:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.matchesResponse'
      security:
      - OAuth2Implicit: []
      summary: Retrieve all matches
      tags:
      - Matches
  /v1/matches/{match_id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Match ID
        in: path
        name: match_id
        required: true
        type: string
      - description: Update Match
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/http.matchUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.matchResponse'
      security:
      - OAuth2Implicit: []
      summary: Update match
      tags:
      - Matches
  /v1/points:
    put:
      responses:
        "200":
          description: OK
      security:
      - OAuth2Implicit: []
      summary: Calculate points based on the current of the current match scores and
        bets
      tags:
      - Points
  /v1/users/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.userResponse'
      security:
      - OAuth2Implicit: []
      summary: Get current user
      tags:
      - Users
securityDefinitions:
  OAuth2Implicit:
    authorizationUrl: http://localhost:8080/realms/development/protocol/openid-connect/auth
    flow: implicit
    type: oauth2
swagger: "2.0"
