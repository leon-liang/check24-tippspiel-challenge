/* tslint:disable */
/* eslint-disable */
/**
 * Check24 Tippspiel Challenge
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface HttpBetResponse
 */
export interface HttpBetResponse {
  /**
   *
   * @type {number}
   * @memberof HttpBetResponse
   */
  awayTeam?: number;
  /**
   *
   * @type {number}
   * @memberof HttpBetResponse
   */
  homeTeam?: number;
  /**
   *
   * @type {string}
   * @memberof HttpBetResponse
   */
  id?: string;
  /**
   *
   * @type {HttpMatchResponse}
   * @memberof HttpBetResponse
   */
  match?: HttpMatchResponse;
}
/**
 *
 * @export
 * @interface HttpBetUpdateRequest
 */
export interface HttpBetUpdateRequest {
  /**
   *
   * @type {HttpBetUpdateRequestBet}
   * @memberof HttpBetUpdateRequest
   */
  bet?: HttpBetUpdateRequestBet;
}
/**
 *
 * @export
 * @interface HttpBetUpdateRequestBet
 */
export interface HttpBetUpdateRequestBet {
  /**
   *
   * @type {number}
   * @memberof HttpBetUpdateRequestBet
   */
  awayTeam: number;
  /**
   *
   * @type {number}
   * @memberof HttpBetUpdateRequestBet
   */
  homeTeam: number;
}
/**
 *
 * @export
 * @interface HttpBetsResponse
 */
export interface HttpBetsResponse {
  /**
   *
   * @type {Array<HttpBetResponse>}
   * @memberof HttpBetsResponse
   */
  bets?: Array<HttpBetResponse>;
}
/**
 *
 * @export
 * @interface HttpCommunitiesResponse
 */
export interface HttpCommunitiesResponse {
  /**
   *
   * @type {Array<HttpCommunityResponse>}
   * @memberof HttpCommunitiesResponse
   */
  communities?: Array<HttpCommunityResponse>;
}
/**
 *
 * @export
 * @interface HttpCommunityCreateRequest
 */
export interface HttpCommunityCreateRequest {
  /**
   *
   * @type {HttpCommunityCreateRequestCommunity}
   * @memberof HttpCommunityCreateRequest
   */
  community?: HttpCommunityCreateRequestCommunity;
}
/**
 *
 * @export
 * @interface HttpCommunityCreateRequestCommunity
 */
export interface HttpCommunityCreateRequestCommunity {
  /**
   *
   * @type {string}
   * @memberof HttpCommunityCreateRequestCommunity
   */
  name?: string;
}
/**
 *
 * @export
 * @interface HttpCommunityResponse
 */
export interface HttpCommunityResponse {
  /**
   *
   * @type {HttpCommunityResponseCommunity}
   * @memberof HttpCommunityResponse
   */
  community?: HttpCommunityResponseCommunity;
}
/**
 *
 * @export
 * @interface HttpCommunityResponseCommunity
 */
export interface HttpCommunityResponseCommunity {
  /**
   *
   * @type {string}
   * @memberof HttpCommunityResponseCommunity
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof HttpCommunityResponseCommunity
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof HttpCommunityResponseCommunity
   */
  owner?: string;
}
/**
 *
 * @export
 * @interface HttpMatchResponse
 */
export interface HttpMatchResponse {
  /**
   *
   * @type {HttpMatchResponseMatch}
   * @memberof HttpMatchResponse
   */
  match?: HttpMatchResponseMatch;
}
/**
 *
 * @export
 * @interface HttpMatchResponseMatch
 */
export interface HttpMatchResponseMatch {
  /**
   *
   * @type {HttpTeam}
   * @memberof HttpMatchResponseMatch
   */
  awayTeam?: HttpTeam;
  /**
   *
   * @type {string}
   * @memberof HttpMatchResponseMatch
   */
  gameTime?: string;
  /**
   *
   * @type {HttpTeam}
   * @memberof HttpMatchResponseMatch
   */
  homeTeam?: HttpTeam;
  /**
   *
   * @type {string}
   * @memberof HttpMatchResponseMatch
   */
  id?: string;
}
/**
 *
 * @export
 * @interface HttpMatchUpdateRequest
 */
export interface HttpMatchUpdateRequest {
  /**
   *
   * @type {HttpMatchUpdateRequestMatch}
   * @memberof HttpMatchUpdateRequest
   */
  match?: HttpMatchUpdateRequestMatch;
}
/**
 *
 * @export
 * @interface HttpMatchUpdateRequestMatch
 */
export interface HttpMatchUpdateRequestMatch {
  /**
   *
   * @type {HttpMatchUpdateRequestMatchAwayTeam}
   * @memberof HttpMatchUpdateRequestMatch
   */
  awayTeam?: HttpMatchUpdateRequestMatchAwayTeam;
  /**
   *
   * @type {HttpMatchUpdateRequestMatchAwayTeam}
   * @memberof HttpMatchUpdateRequestMatch
   */
  homeTeam?: HttpMatchUpdateRequestMatchAwayTeam;
}
/**
 *
 * @export
 * @interface HttpMatchUpdateRequestMatchAwayTeam
 */
export interface HttpMatchUpdateRequestMatchAwayTeam {
  /**
   *
   * @type {string}
   * @memberof HttpMatchUpdateRequestMatchAwayTeam
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof HttpMatchUpdateRequestMatchAwayTeam
   */
  result?: number;
}
/**
 *
 * @export
 * @interface HttpMatchesResponse
 */
export interface HttpMatchesResponse {
  /**
   *
   * @type {Array<HttpMatchResponse>}
   * @memberof HttpMatchesResponse
   */
  matches?: Array<HttpMatchResponse>;
}
/**
 *
 * @export
 * @interface HttpRootResponse
 */
export interface HttpRootResponse {
  /**
   *
   * @type {string}
   * @memberof HttpRootResponse
   */
  message?: string;
}
/**
 *
 * @export
 * @interface HttpTeam
 */
export interface HttpTeam {
  /**
   *
   * @type {string}
   * @memberof HttpTeam
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof HttpTeam
   */
  result?: number;
}
/**
 *
 * @export
 * @interface HttpUserResponse
 */
export interface HttpUserResponse {
  /**
   *
   * @type {HttpUserResponseUser}
   * @memberof HttpUserResponse
   */
  user?: HttpUserResponseUser;
}
/**
 *
 * @export
 * @interface HttpUserResponseUser
 */
export interface HttpUserResponseUser {
  /**
   *
   * @type {string}
   * @memberof HttpUserResponseUser
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof HttpUserResponseUser
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof HttpUserResponseUser
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof HttpUserResponseUser
   */
  lastName?: string;
  /**
   *
   * @type {string}
   * @memberof HttpUserResponseUser
   */
  username?: string;
}

/**
 * BetsApi - axios parameter creator
 * @export
 */
export const BetsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Update bet with the given id
     * @param {string} betId Bet ID
     * @param {HttpBetUpdateRequest} data Update Bet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1BetsBetIdPut: async (
      betId: string,
      data: HttpBetUpdateRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'betId' is not null or undefined
      assertParamExists("v1BetsBetIdPut", "betId", betId);
      // verify required parameter 'data' is not null or undefined
      assertParamExists("v1BetsBetIdPut", "data", data);
      const localVarPath = `/v1/bets/{bet_id}`.replace(
        `{${"bet_id"}}`,
        encodeURIComponent(String(betId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2Implicit required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2Implicit",
        [],
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve all bets from the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1BetsGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/bets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2Implicit required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2Implicit",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BetsApi - functional programming interface
 * @export
 */
export const BetsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BetsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Update bet with the given id
     * @param {string} betId Bet ID
     * @param {HttpBetUpdateRequest} data Update Bet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1BetsBetIdPut(
      betId: string,
      data: HttpBetUpdateRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HttpBetResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v1BetsBetIdPut(
        betId,
        data,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BetsApi.v1BetsBetIdPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Retrieve all bets from the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1BetsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HttpBetsResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1BetsGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BetsApi.v1BetsGet"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * BetsApi - factory interface
 * @export
 */
export const BetsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = BetsApiFp(configuration);
  return {
    /**
     *
     * @summary Update bet with the given id
     * @param {string} betId Bet ID
     * @param {HttpBetUpdateRequest} data Update Bet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1BetsBetIdPut(
      betId: string,
      data: HttpBetUpdateRequest,
      options?: any,
    ): AxiosPromise<HttpBetResponse> {
      return localVarFp
        .v1BetsBetIdPut(betId, data, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve all bets from the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1BetsGet(options?: any): AxiosPromise<HttpBetsResponse> {
      return localVarFp
        .v1BetsGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BetsApi - object-oriented interface
 * @export
 * @class BetsApi
 * @extends {BaseAPI}
 */
export class BetsApi extends BaseAPI {
  /**
   *
   * @summary Update bet with the given id
   * @param {string} betId Bet ID
   * @param {HttpBetUpdateRequest} data Update Bet
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BetsApi
   */
  public v1BetsBetIdPut(
    betId: string,
    data: HttpBetUpdateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return BetsApiFp(this.configuration)
      .v1BetsBetIdPut(betId, data, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve all bets from the current user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BetsApi
   */
  public v1BetsGet(options?: RawAxiosRequestConfig) {
    return BetsApiFp(this.configuration)
      .v1BetsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CommunitiesApi - axios parameter creator
 * @export
 */
export const CommunitiesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Retrieve a community with the given id
     * @param {string} communityId Community ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CommunitiesCommunityIdGet: async (
      communityId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'communityId' is not null or undefined
      assertParamExists(
        "v1CommunitiesCommunityIdGet",
        "communityId",
        communityId,
      );
      const localVarPath = `/v1/communities/{community_id}`.replace(
        `{${"community_id"}}`,
        encodeURIComponent(String(communityId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2Implicit required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2Implicit",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Join the specified community
     * @param {string} communityId Community ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CommunitiesCommunityIdJoinPost: async (
      communityId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'communityId' is not null or undefined
      assertParamExists(
        "v1CommunitiesCommunityIdJoinPost",
        "communityId",
        communityId,
      );
      const localVarPath = `/v1/communities/{community_id}/join`.replace(
        `{${"community_id"}}`,
        encodeURIComponent(String(communityId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2Implicit required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2Implicit",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Leave the specified community
     * @param {string} communityId Community ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CommunitiesCommunityIdLeavePut: async (
      communityId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'communityId' is not null or undefined
      assertParamExists(
        "v1CommunitiesCommunityIdLeavePut",
        "communityId",
        communityId,
      );
      const localVarPath = `/v1/communities/{community_id}/leave`.replace(
        `{${"community_id"}}`,
        encodeURIComponent(String(communityId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2Implicit required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2Implicit",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve all users that are part of a community
     * @param {string} communityId Community ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CommunitiesCommunityIdMembersGet: async (
      communityId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'communityId' is not null or undefined
      assertParamExists(
        "v1CommunitiesCommunityIdMembersGet",
        "communityId",
        communityId,
      );
      const localVarPath = `/v1/communities/{community_id}/members`.replace(
        `{${"community_id"}}`,
        encodeURIComponent(String(communityId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2Implicit required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2Implicit",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve all communities the current user is part of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CommunitiesGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/communities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2Implicit required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2Implicit",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new community
     * @param {HttpCommunityCreateRequest} data Create Community
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CommunitiesPost: async (
      data: HttpCommunityCreateRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'data' is not null or undefined
      assertParamExists("v1CommunitiesPost", "data", data);
      const localVarPath = `/v1/communities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2Implicit required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2Implicit",
        [],
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CommunitiesApi - functional programming interface
 * @export
 */
export const CommunitiesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    CommunitiesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Retrieve a community with the given id
     * @param {string} communityId Community ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CommunitiesCommunityIdGet(
      communityId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HttpCommunityResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CommunitiesCommunityIdGet(
          communityId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CommunitiesApi.v1CommunitiesCommunityIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Join the specified community
     * @param {string} communityId Community ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CommunitiesCommunityIdJoinPost(
      communityId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HttpCommunityResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CommunitiesCommunityIdJoinPost(
          communityId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CommunitiesApi.v1CommunitiesCommunityIdJoinPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Leave the specified community
     * @param {string} communityId Community ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CommunitiesCommunityIdLeavePut(
      communityId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HttpCommunityResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CommunitiesCommunityIdLeavePut(
          communityId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CommunitiesApi.v1CommunitiesCommunityIdLeavePut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Retrieve all users that are part of a community
     * @param {string} communityId Community ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CommunitiesCommunityIdMembersGet(
      communityId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HttpCommunitiesResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CommunitiesCommunityIdMembersGet(
          communityId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "CommunitiesApi.v1CommunitiesCommunityIdMembersGet"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Retrieve all communities the current user is part of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CommunitiesGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HttpCommunitiesResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CommunitiesGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CommunitiesApi.v1CommunitiesGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new community
     * @param {HttpCommunityCreateRequest} data Create Community
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1CommunitiesPost(
      data: HttpCommunityCreateRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HttpCommunityResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1CommunitiesPost(data, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CommunitiesApi.v1CommunitiesPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * CommunitiesApi - factory interface
 * @export
 */
export const CommunitiesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CommunitiesApiFp(configuration);
  return {
    /**
     *
     * @summary Retrieve a community with the given id
     * @param {string} communityId Community ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CommunitiesCommunityIdGet(
      communityId: string,
      options?: any,
    ): AxiosPromise<HttpCommunityResponse> {
      return localVarFp
        .v1CommunitiesCommunityIdGet(communityId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Join the specified community
     * @param {string} communityId Community ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CommunitiesCommunityIdJoinPost(
      communityId: string,
      options?: any,
    ): AxiosPromise<HttpCommunityResponse> {
      return localVarFp
        .v1CommunitiesCommunityIdJoinPost(communityId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Leave the specified community
     * @param {string} communityId Community ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CommunitiesCommunityIdLeavePut(
      communityId: string,
      options?: any,
    ): AxiosPromise<HttpCommunityResponse> {
      return localVarFp
        .v1CommunitiesCommunityIdLeavePut(communityId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve all users that are part of a community
     * @param {string} communityId Community ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CommunitiesCommunityIdMembersGet(
      communityId: string,
      options?: any,
    ): AxiosPromise<HttpCommunitiesResponse> {
      return localVarFp
        .v1CommunitiesCommunityIdMembersGet(communityId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve all communities the current user is part of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CommunitiesGet(options?: any): AxiosPromise<HttpCommunitiesResponse> {
      return localVarFp
        .v1CommunitiesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new community
     * @param {HttpCommunityCreateRequest} data Create Community
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1CommunitiesPost(
      data: HttpCommunityCreateRequest,
      options?: any,
    ): AxiosPromise<HttpCommunityResponse> {
      return localVarFp
        .v1CommunitiesPost(data, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CommunitiesApi - object-oriented interface
 * @export
 * @class CommunitiesApi
 * @extends {BaseAPI}
 */
export class CommunitiesApi extends BaseAPI {
  /**
   *
   * @summary Retrieve a community with the given id
   * @param {string} communityId Community ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunitiesApi
   */
  public v1CommunitiesCommunityIdGet(
    communityId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CommunitiesApiFp(this.configuration)
      .v1CommunitiesCommunityIdGet(communityId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Join the specified community
   * @param {string} communityId Community ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunitiesApi
   */
  public v1CommunitiesCommunityIdJoinPost(
    communityId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CommunitiesApiFp(this.configuration)
      .v1CommunitiesCommunityIdJoinPost(communityId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Leave the specified community
   * @param {string} communityId Community ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunitiesApi
   */
  public v1CommunitiesCommunityIdLeavePut(
    communityId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CommunitiesApiFp(this.configuration)
      .v1CommunitiesCommunityIdLeavePut(communityId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve all users that are part of a community
   * @param {string} communityId Community ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunitiesApi
   */
  public v1CommunitiesCommunityIdMembersGet(
    communityId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CommunitiesApiFp(this.configuration)
      .v1CommunitiesCommunityIdMembersGet(communityId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve all communities the current user is part of
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunitiesApi
   */
  public v1CommunitiesGet(options?: RawAxiosRequestConfig) {
    return CommunitiesApiFp(this.configuration)
      .v1CommunitiesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new community
   * @param {HttpCommunityCreateRequest} data Create Community
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunitiesApi
   */
  public v1CommunitiesPost(
    data: HttpCommunityCreateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return CommunitiesApiFp(this.configuration)
      .v1CommunitiesPost(data, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MatchesApi - axios parameter creator
 * @export
 */
export const MatchesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Retrieve all matches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1MatchesGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/matches`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2Implicit required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2Implicit",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update match
     * @param {string} matchId Match ID
     * @param {HttpMatchUpdateRequest} data Update Match
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1MatchesMatchIdPut: async (
      matchId: string,
      data: HttpMatchUpdateRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'matchId' is not null or undefined
      assertParamExists("v1MatchesMatchIdPut", "matchId", matchId);
      // verify required parameter 'data' is not null or undefined
      assertParamExists("v1MatchesMatchIdPut", "data", data);
      const localVarPath = `/v1/matches/{match_id}`.replace(
        `{${"match_id"}}`,
        encodeURIComponent(String(matchId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2Implicit required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2Implicit",
        [],
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        data,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MatchesApi - functional programming interface
 * @export
 */
export const MatchesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MatchesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Retrieve all matches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1MatchesGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HttpMatchesResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1MatchesGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MatchesApi.v1MatchesGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update match
     * @param {string} matchId Match ID
     * @param {HttpMatchUpdateRequest} data Update Match
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1MatchesMatchIdPut(
      matchId: string,
      data: HttpMatchUpdateRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HttpMatchResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1MatchesMatchIdPut(
          matchId,
          data,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MatchesApi.v1MatchesMatchIdPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * MatchesApi - factory interface
 * @export
 */
export const MatchesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = MatchesApiFp(configuration);
  return {
    /**
     *
     * @summary Retrieve all matches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1MatchesGet(options?: any): AxiosPromise<HttpMatchesResponse> {
      return localVarFp
        .v1MatchesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update match
     * @param {string} matchId Match ID
     * @param {HttpMatchUpdateRequest} data Update Match
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1MatchesMatchIdPut(
      matchId: string,
      data: HttpMatchUpdateRequest,
      options?: any,
    ): AxiosPromise<HttpMatchResponse> {
      return localVarFp
        .v1MatchesMatchIdPut(matchId, data, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MatchesApi - object-oriented interface
 * @export
 * @class MatchesApi
 * @extends {BaseAPI}
 */
export class MatchesApi extends BaseAPI {
  /**
   *
   * @summary Retrieve all matches
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MatchesApi
   */
  public v1MatchesGet(options?: RawAxiosRequestConfig) {
    return MatchesApiFp(this.configuration)
      .v1MatchesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update match
   * @param {string} matchId Match ID
   * @param {HttpMatchUpdateRequest} data Update Match
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MatchesApi
   */
  public v1MatchesMatchIdPut(
    matchId: string,
    data: HttpMatchUpdateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MatchesApiFp(this.configuration)
      .v1MatchesMatchIdPut(matchId, data, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RootApi - axios parameter creator
 * @export
 */
export const RootApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Example
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RootApi - functional programming interface
 * @export
 */
export const RootApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RootApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Example
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rootGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HttpRootResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.rootGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["RootApi.rootGet"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * RootApi - factory interface
 * @export
 */
export const RootApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RootApiFp(configuration);
  return {
    /**
     *
     * @summary Example
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootGet(options?: any): AxiosPromise<HttpRootResponse> {
      return localVarFp
        .rootGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RootApi - object-oriented interface
 * @export
 * @class RootApi
 * @extends {BaseAPI}
 */
export class RootApi extends BaseAPI {
  /**
   *
   * @summary Example
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RootApi
   */
  public rootGet(options?: RawAxiosRequestConfig) {
    return RootApiFp(this.configuration)
      .rootGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersMeGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v1/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2Implicit required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2Implicit",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v1UsersMeGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HttpUserResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v1UsersMeGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.v1UsersMeGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     *
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UsersMeGet(options?: any): AxiosPromise<HttpUserResponse> {
      return localVarFp
        .v1UsersMeGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @summary Get current user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public v1UsersMeGet(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .v1UsersMeGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
